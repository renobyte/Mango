package com.ls.manga.ui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Iterator;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import com.ls.manga.Mango;
import com.ls.manga.MangoHttp;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;

public class PomaDecorHandler
{
	public void downloadMissingBackground(Context c)
	{
		ArrayList<PomaBackground> l = this.parseDecorXml(readDecorXml());
		for (Iterator iterator = l.iterator(); iterator.hasNext();)
        {
	        PomaBackground pomaBackground = (PomaBackground) iterator.next();
	        if (pomaBackground.downloaded == false)
	        {
	        	String status = MangoHttp.downloadEncodedImage(pomaBackground.url, null, pomaBackground.name, 2, c); 
	        	if (status.equals("ok") == false)
	        		Mango.Log("downloadMissingBackgrounds: " + status);
	        }
        }
	}
	
	public static void writeDecorImageToDisk(byte[] img, String name)
	{
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state))
		{
			File file = null;
			FileOutputStream out = null;
			try
			{
				file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/");
				if (file.exists())
					file.delete();
				file.getParentFile().mkdirs();
				file.createNewFile();
				
				file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/.nomedia");
				if (file.exists())
					file.delete();
				file.getParentFile().mkdirs();
				file.createNewFile();
				
				file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/" + name + ".png");
				if (file.exists())
					file.delete();
				file.createNewFile();
				
				out = new FileOutputStream(file);
				out.write(img);
			}
			catch (IOException ioe)
			{
				Mango.Log("writeDecorImageToDisk: Problem! (" + String.valueOf(file.getAbsolutePath()) + ", " + name + ", " + ioe.getMessage() + ")");
			}
			finally
			{
				try
				{
					if (out != null)
						out.close();
					out = null;
				}
				catch (IOException e)
				{

				}
			}
		}
	}
	
	public void downloadDecorXml(Context c)
	{
		String xmlData = MangoHttp.downloadData("http://pocketmanga.leetsoft.net/backgrounds/android/decorindex.xml", c);
		if (xmlData.startsWith("Exception"))
		{
			Mango.getSharedPreferences().edit().putLong("nextDecorCheck", System.currentTimeMillis() + (1000 * 60)).commit();
			Mango.Log("downloadDecorXml: " + xmlData);
			return;
		}

		if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()))
		{
			File file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/index.xml");
			BufferedWriter out = null;

			try
			{
				if (file.exists())
					file.delete();
				file.getParentFile().mkdirs();
				file.createNewFile();
				out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
				out.write(xmlData);
			}
			catch (IOException ioe)
			{
				Mango.getSharedPreferences().edit().putLong("nextDecorCheck", System.currentTimeMillis() + (1000 * 60)).commit();
				Mango.Log("downloadDecorXml: " + ioe.toString());
				return;
			}
			finally
			{
				try
				{
					if (out != null)
						out.close();
					out = null;
				}
				catch (IOException e)
				{

				}
			}
		}
		else
		{
			Mango.getSharedPreferences().edit().putLong("nextDecorCheck", System.currentTimeMillis() + (1000 * 60)).commit();
			return;
		}
	}
	
	public static Bitmap readDecorBitmap(String name)
	{
		String state = Environment.getExternalStorageState();
		if (state.startsWith(Environment.MEDIA_MOUNTED))
		{
			File file;
			try
			{
				file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/" + name + ".png");
				if (!file.exists())
					throw new Exception("File does not exist (" + file.getAbsolutePath() + ")");
				//long time = System.currentTimeMillis();

				Bitmap bm = BitmapFactory.decodeFile(file.getAbsolutePath());
				if (bm == null)
					throw new Exception("Couldn't decode file " + file.getAbsolutePath() + ", not a valid bitmap or file couldn't be accessed.");
				return bm;
			}
			catch (Exception ioe)
			{
				Mango.Log("Exception when reading decor bitmap! " + ioe.getMessage() + ")");
			}
			catch (OutOfMemoryError oom)
			{
				Mango.Log("This really shouldn't happen!");
			}
		}
		else
		{
			Mango.Log("Couldn't read decor bitmap because SD card is locked.");
		}
		return null;
	}

	public String readDecorXml()
	{

		String state = Environment.getExternalStorageState();
		if (state.startsWith(Environment.MEDIA_MOUNTED))
		{
			File file;
			BufferedReader br = null;
			try
			{
				file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/index.xml");
				if (!file.exists())
					return null;
				br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
				StringBuilder builder = new StringBuilder();
				char[] buffer = new char[8192];
				int charsRead = 0;
				while ((charsRead = br.read(buffer)) > 0)
				{
					builder.append(buffer, 0, charsRead);
					buffer = new char[8192];
				}
				return builder.toString();
			}
			catch (IOException ioe)
			{
				Mango.Log("readDecorXml: " + ioe.toString());
				return null;
			}
			finally
			{
				try
				{
					if (br != null)
						br.close();
					br = null;
				}
				catch (IOException e)
				{

				}
			}
		}
		return null;
	}

	public static boolean checkForDecorIndex()
	{
		String state = Environment.getExternalStorageState();
		if (state.startsWith(Environment.MEDIA_MOUNTED))
		{
			File file;
			file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/index.xml");
			if (!file.exists())
			{
				return false;
			}
			else
			{
				return true;
			}
		}
		else
		{
			return false;
		}
	}
	
	public static boolean checkForDecorBackground(String name)
	{
		String state = Environment.getExternalStorageState();
		if (state.startsWith(Environment.MEDIA_MOUNTED))
		{
			File file;
			file = new File(Mango.getPomaDataDirectory() + "/PocketManga/backgrounds/" + name + ".png");
			if (!file.exists())
			{
				return false;
			}
			else
			{
				return true;
			}
		}
		else
		{
			return false;
		}
	}

	public ArrayList<PomaBackground> parseDecorXml(String data)
	{
		ArrayList<PomaBackground> decor = new ArrayList<PomaBackground>();
		PomaBackground bg = new PomaBackground();
		bg.downloaded = true;
		bg.name = "dgrayman";
		bg.landscape = false;
		bg.url = "local";
		decor.add(bg);
		bg = new PomaBackground();
		bg.downloaded = true;
		bg.name = "airgear";
		bg.landscape = true;
		bg.url = "local";

		try
		{
			SAXParserFactory saxFactory = SAXParserFactory.newInstance();
			SAXParser parser = saxFactory.newSAXParser();
			XMLReader reader = parser.getXMLReader();
			DecorSaxHandler handler = new DecorSaxHandler();
			reader.setContentHandler(handler);
			reader.parse(new InputSource(new StringReader(data)));
			decor.addAll(handler.getAllDecor());
		}
		catch (Exception e)
		{
			// TODO: handle exception
		}

		return decor;
	}

	public class DecorSaxHandler extends DefaultHandler
	{
		ArrayList<PomaBackground> decorList;
		PomaBackground            currentDecor;

		public ArrayList<PomaBackground> getAllDecor()
		{
			return this.decorList;
		}

		@Override
		public void startDocument() throws SAXException
		{
			super.startDocument();
			decorList = new ArrayList<PomaBackground>();
		}

		@Override
		public void startElement(String uri, String localName, String name, Attributes attributes) throws SAXException
		{
			super.startElement(uri, localName, name, attributes);
			if (localName.equalsIgnoreCase("background"))
			{
				this.currentDecor = new PomaBackground();
			}
			else if (localName.equalsIgnoreCase("name"))
			{
				currentDecor.name = attributes.getValue(0);
			}
			else if (localName.equalsIgnoreCase("url"))
			{
				currentDecor.url = attributes.getValue(0);
			}
			else if (localName.equalsIgnoreCase("landscape"))
			{
				currentDecor.landscape = Boolean.parseBoolean(attributes.getValue(0));
			}
		}

		@Override
		public void endElement(String uri, String localName, String name) throws SAXException
		{
			super.endElement(uri, localName, name);
			if (this.currentDecor != null)
			{
				if (localName.equalsIgnoreCase("background"))
				{
					if (checkForDecorBackground(currentDecor.name))
						currentDecor.downloaded = true;
					decorList.add(currentDecor);
				}
			}
		}
	}
}
