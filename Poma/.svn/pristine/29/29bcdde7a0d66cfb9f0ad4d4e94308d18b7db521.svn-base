package com.ls.manga;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;

import com.ls.manga.ui.PomaDecorHandler;
import com.ls.manga.R;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

public class PomaHttp
{
	private static final int BUFFER_SIZE = 8192;
	private static boolean   _offlineMode;

	public static boolean isOfflineMode()
	{
		return PocketManga.getSharedPreferences().getBoolean("offlineMode", false);
	}
	
	public static boolean isWifi(Context context)
	{
		ConnectivityManager mgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = mgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);

		return info.isConnected();
	}

	public static void setOfflineMode(boolean offlineMode)
	{
		_offlineMode = offlineMode;
	}

	public static String downloadData(String url, Context context)
	{
		url = url.replace("%SERVER_URL%", PocketManga.getSharedPreferences().getString("serverUrl", "174.137.55.109"));
		
		InputStream is = null;
		InputStreamReader isr;

		url = cleanString(url);

		if (url.contains("mangable") && !url.endsWith("?mango"))
			url += "?mango";

		try
		{
			PocketManga.Log("PomaHttp", "Requesting " + url + "");
			
			if (!PomaHttp.checkConnectivity(context))
				throw new Exception("No mobile data connectivity.");
			if (isOfflineMode())
				throw new Exception("PocketManga is in offline mode. To disable offline mode, return to the main menu and press the Back key, then restart the app.");

			HttpGet httpGet = new HttpGet(url);
			HttpParams httpParameters = new BasicHttpParams();
			int timeoutConnection = 12000;
			int timeoutSocket = 12000;
			HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);
			HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);
			HttpConnectionParams.setSocketBufferSize(httpParameters, 8192);

			DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);

			HttpResponse response = httpClient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			boolean gzip = false;

			Header contentEncoding = response.getFirstHeader("Content-Encoding");
			if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase("gzip"))
				gzip = true;

			is = entity.getContent();

			if (is == null)
			{
				return "Exception: No response from server.";
			}

			StringBuilder content = new StringBuilder();
			//long time = System.currentTimeMillis();

			if (gzip)
			{
				PocketManga.Log("PomaHttp", "gzip encoding up in this mofo");
				GZIPInputStream gin = new GZIPInputStream(is);
				int charRead;
				byte[] inputBuffer = new byte[BUFFER_SIZE];

				//PocketManga.Log("PomaHttp", "Reading gzipped data into buffer... (Request 0x" + Integer.toHexString(url.hashCode()) + ")");

				while ((charRead = gin.read(inputBuffer)) > 0)
				{
					// TODO: calling trim() isn't really the right way to do this since it would fuck up instances
					// where there is legitimately a space at the beginning or end. a better solution would
					// be to only decode 'charRead' bytes from the string, but I've got no idea how to do that
					content.append(new String(inputBuffer, "UTF-8").trim());
					inputBuffer = new byte[BUFFER_SIZE];
				}
			}
			else
			{
				isr = new InputStreamReader(is, "UTF-8");

				int charRead;
				char[] inputBuffer = new char[BUFFER_SIZE];

				//PocketManga.Log("PomaHttp", "Reading data into buffer... (Request 0x" + Integer.toHexString(url.hashCode()) + ")");
				while ((charRead = isr.read(inputBuffer)) > 0)
				{
					content.append(inputBuffer, 0, charRead);
					inputBuffer = new char[BUFFER_SIZE];
				}
			}

			if (response.getStatusLine().getStatusCode() >= 400) // check if response code is 4xx or 5xx
				return "Exception: HTTP " + response.getStatusLine().getStatusCode() + (response.getStatusLine().getStatusCode() == 404 ? " - No page exists at " + url : ".\n" + content.toString()) + ".\n";
			
			// PocketManga.Log(url + ": " + content.substring(0, ((content.length() < 50) ? content.length() :
			// content.length())));
			//PocketManga.Log("PomaHttp", "Data downloaded successfully in " + String.valueOf(System.currentTimeMillis() - time) + "ms. (Request 0x" + Integer.toHexString(url.hashCode()) + ")");
			return content.toString();
		}
		catch (Exception ex)
		{
			PocketManga.Log("PomaHttp", "EXCEPTION! (" + ex.getClass().getSimpleName() + "): " + ex.getMessage());
			return "Exception (" + ex.getClass().getSimpleName() + "): " + ex.getMessage();
		}
		finally
		{
			if (is != null)
				try
				{
					is.close();
				}
				catch (IOException e)
				{
				}
			is = null;
		}
	}

	public static Object downloadBitmap(String url, Context context)
	{
		url = url.replace("%SERVER_URL%", PocketManga.getSharedPreferences().getString("serverUrl", "174.137.55.109"));

		InputStream is = null;
		BufferedInputStream bis = null;
		ByteArrayOutputStream dataStream = null;
		BufferedOutputStream out = null;
		byte[] buffer = new byte[BUFFER_SIZE];

		if (url.contains("mangable") && !url.endsWith("?mango"))
			url += "?mango";

		url = cleanString(url);

		try
		{
			// PocketManga.Log("PomaHttp", "Connecting... (Request 0x" + Integer.toHexString(url.hashCode()) + ")");
			PocketManga.Log("PomaHttp", "Requesting " + url + "");
			
			if (!PomaHttp.checkConnectivity(context))
				throw new Exception("No mobile data connectivity.");
			if (isOfflineMode())
				throw new Exception("PocketManga is in offline mode. To disable offline mode, return to the main menu and press the Back key, then restart the app.");

			HttpGet httpGet = new HttpGet(url);
			HttpParams httpParameters = new BasicHttpParams();
			int timeoutConnection = 4000;
			HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);
			int timeoutSocket = 6000;
			HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);

			DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);

			HttpResponse response = httpClient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			is = entity.getContent();

			if (is == null)
				return "Exception: No response from server.";

			bis = new BufferedInputStream(is, BUFFER_SIZE);
			dataStream = new ByteArrayOutputStream();
			out = new BufferedOutputStream(dataStream, BUFFER_SIZE);

			//PocketManga.Log("PomaHttp", "Reading image data into buffer... (Request 0x" + Integer.toHexString(url.hashCode()) + ")");
			//long time = System.currentTimeMillis();
			int bytesRead = 0;
			while (bytesRead != -1)
			{

				bytesRead = bis.read(buffer);
				if (bytesRead != -1)
					out.write(buffer, 0, bytesRead);
			}
			out.flush();
			//PocketManga.Log("PomaHttp", "Image data downloaded successfully in " + String.valueOf(System.currentTimeMillis() - time) + "ms. Decoding...");
			byte[] data;
			Bitmap bitmap;
			data = dataStream.toByteArray();
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inSampleSize = 1;

			options.inDither = false;
			bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
			return bitmap;

		}
		catch (OutOfMemoryError oom)
		{
			PocketManga.Log("PomaHttp", "PocketManga went /oom. Blame the tank.");
			System.gc();
			return "Exception (" + oom.getClass().getSimpleName() + "): " + oom.getMessage();
		}
		catch (Exception ex)
		{
			PocketManga.Log("PomaHttp", "(Bitmap) EXCEPTION! (" + ex.getClass() + "): " + ex.getMessage());
			return "Exception (" + ex.getClass().getSimpleName() + "): " + ex.getMessage();
		}
		finally
		{
			try
			{
				bis.close();
				bis = null;
			}
			catch (Exception e)
			{

			}
			try
			{
				dataStream.close();
				dataStream = null;
			}
			catch (Exception e)
			{

			}
			try
			{
				out.close();
				out = null;
			}
			catch (Exception e)
			{

			}
		}
	}

	public static String downloadEncodedImage(String url, final String filepath, final String filename, int mode, Context context)
	{
		if (url == null)
			url = "";
		url = url.replace("%SERVER_URL%", PocketManga.getSharedPreferences().getString("serverUrl", "174.137.55.109"));

		InputStream is = null;
		BufferedInputStream bis = null;
		ByteArrayOutputStream dataStream = null;
		BufferedOutputStream out = null;
		byte[] buffer = new byte[BUFFER_SIZE];

		if (url.contains("mangable") && !url.endsWith("?mango"))
			url += "?mango";

		url = cleanString(url);

		try
		{
			// PocketManga.Log("PomaHttp", "Connecting... (Request 0x" + Integer.toHexString(url.hashCode()) + ")");
			PocketManga.Log("PomaHttp", "Requesting " + url + "");

			if (!PomaHttp.checkConnectivity(context))
				throw new Exception("No mobile data connectivity.");
			if (PocketManga.getSharedPreferences().getBoolean("offlineMode", false))
				throw new Exception("PocketManga is in offline mode. To disable offline mode, return to the main menu and press the Back key, then restart the app.");

			HttpGet httpGet = new HttpGet(url);
			HttpParams httpParameters = new BasicHttpParams();
			int timeoutConnection = 5000;
			HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutConnection);
			int timeoutSocket = 6000;
			HttpConnectionParams.setSoTimeout(httpParameters, timeoutSocket);

			DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);

			HttpResponse response = httpClient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			if (response.getStatusLine().getStatusCode() >= 400) // check if response code is 4xx or 5xx
				return "Exception: HTTP " + response.getStatusLine().getStatusCode() + (response.getStatusLine().getStatusCode() == 404 ? " - No image exists at " + url : "") + ".\n";

			is = entity.getContent();

			if (is == null)
				return "Exception: No response from server.";

			bis = new BufferedInputStream(is, BUFFER_SIZE);
			dataStream = new ByteArrayOutputStream();
			out = new BufferedOutputStream(dataStream, BUFFER_SIZE);

			//PocketManga.Log("PomaHttp", "Reading image data into buffer... (Request 0x" + Integer.toHexString(url.hashCode()) + ")");
			//long time = System.currentTimeMillis();
			int bytesRead = 0;
			while (bytesRead != -1)
			{

				bytesRead = bis.read(buffer);
				if (bytesRead != -1)
					out.write(buffer, 0, bytesRead);
			}
			out.flush();
			//PocketManga.Log("PomaHttp", "Image data downloaded successfully in " + String.valueOf(System.currentTimeMillis() - time) + "ms. Saving...");
			byte[] data;
			data = dataStream.toByteArray();
			if (mode == 0)
				PomaCache.writeEncodedImageToCache(data, filepath, filename);
			else if (mode == 1)
				PomaLibraryIO.writeEncodedImageToDisk(filepath, filename, data);
			else if (mode == 2)
				PomaDecorHandler.writeDecorImageToDisk(data, filename);
			return "ok";

		}
		catch (Exception ex)
		{
			PocketManga.Log("PomaHttp", "(EncodedImage) EXCEPTION! (" + ex.getClass() + "): " + ex.getMessage());
			return "Exception (" + ex.getClass().getSimpleName() + "): " + ex.getMessage();
		}
		finally
		{
			try
			{
				bis.close();
				bis = null;
			}
			catch (Exception e)
			{

			}
			try
			{
				dataStream.close();
				dataStream = null;
			}
			catch (Exception e)
			{

			}
			try
			{
				out.close();
				out = null;
			}
			catch (Exception e)
			{

			}
		}
	}

	public static String cleanString(String str)
	{
		str = str.replace("[", "%5B");
		str = str.replace("]", "%5D");
		str = str.replace(" ", "%20");
		return str;
	}

	public static boolean checkConnectivity(Context context)
	{
		ConnectivityManager mgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = mgr.getActiveNetworkInfo();

		if (info == null || !info.isConnected() || !info.isAvailable())
			return false;
		return true;
	}
}
